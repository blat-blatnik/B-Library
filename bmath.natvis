<?xml version="1.0" encoding="utf-8"?>

<!-- 
  Bmath debugger visualizers for Visual Studio
  
  This will make data appear nicely formatted in the debugger.
  
  For example, a variable declared like this: 
  
  vec4 v = vec4(1, 2, 3, 4);
  
  Will show up in the debugger like this:
  
   Name    Value
  ..................
   v       [1 2 3 4]
  
  instead of like this:
  
   Name    Value
  ..........................................................
   v       {x=1.000000 r=1.000000 s=1.000000 y=2.000000 ...}
  
  === How to Use ===
  
  Copy this file to the project directory of each project using Bmath, or just copy it to
  
  %USERPROFILE%\Douments\Visual Studio 2019\Visualizers\ (replace '2019' when necessary)
  or
  %VSINSTALLDIR%\Common7\Packages\Debugger\Visualizers\ (requires admin access)
  
  if you want to use this from every project.
  See also https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects 
-->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

	<Type Name="vector&lt;bool,2&gt;" Priority="High">
		<DisplayString>[{(int)x} {(int)y}]</DisplayString>
		<Expand HideRawView="1">
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;bool,3&gt;" Priority="High">
		<DisplayString>[{(int)x} {(int)y} {(int)z}]</DisplayString>
		<Expand HideRawView="1">
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
			<Item Name="z">z</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;bool,4&gt;" Priority="High">
		<DisplayString>[{(int)x} {(int)y} {(int)z} {(int)w}]</DisplayString>
		<Expand HideRawView="1">
			<Item Name="x">x</Item>
			<Item Name="y">y</Item>
			<Item Name="z">z</Item>
			<Item Name="w">w</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;*,2&gt;">
		<DisplayString>[{x,g} {y,g}]</DisplayString>
		<Expand HideRawView="1">
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;*,3&gt;">
		<DisplayString>[{x,g} {y,g} {z,g}]</DisplayString>
		<Expand HideRawView="1">
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
			<Item Name="z">z,g</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;*,4&gt;">
		<DisplayString>[{x,g} {y,g} {z,g} {w,g}]</DisplayString>
		<Expand HideRawView="1">
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
			<Item Name="z">z,g</Item>
			<Item Name="w">w,g</Item>
		</Expand>
	</Type>
	
	<Type Name="vector&lt;float,2&gt;" Priority="High">
		<DisplayString>[{x,g} {y,g}]</DisplayString>
		<Expand HideRawView="1">
			<CustomListItems MaxItemsPerView="1">
				<!-- calculate length using fast inverse sqrt -->
				<Variable Name="k" InitialValue="x*x+y*y"/>
				<Variable Name="n" InitialValue="k/2"/>
				<Variable Name="i" InitialValue="0x5F3759DF - ((*(int *)&amp;k) &gt;&gt; 1)"/>
				<If Condition="k != 0">
					<Exec>k = *(float *)&amp;i</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Item Name="[len]">1/k,g</Item>
				</If>
				<If Condition="k == 0">
					<Item Name="[len]">0.0f,g</Item>
				</If>
			</CustomListItems>
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;float,3&gt;" Priority="High">
		<DisplayString>[{x,g} {y,g} {z,g}]</DisplayString>
		<Expand HideRawView="1">
			<CustomListItems MaxItemsPerView="1">
				<!-- calculate length using fast inverse sqrt -->
				<Variable Name="k" InitialValue="x*x+y*y+z*z"/>
				<Variable Name="n" InitialValue="k/2"/>
				<Variable Name="i" InitialValue="0x5F3759DF - ((*(int *)&amp;k) &gt;&gt; 1)"/>
				<If Condition="k != 0">
					<Exec>k = *(float *)&amp;i</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Item Name="[len]">1/k,g</Item>
				</If>
				<If Condition="k == 0">
					<Item Name="[len]">0.0f,g</Item>
				</If>
			</CustomListItems>
			<Synthetic Name="[rgba]">
				<DisplayString>
					<!-- hex RGBA color - alpha is assumed to be 255 -->
					#{
					(unsigned((x&lt;0?0:(x&gt;1?1:x))*255.5f) &lt;&lt; 24) |
					(unsigned((y&lt;0?0:(y&gt;1?1:y))*255.5f) &lt;&lt; 16) |
					(unsigned((z&lt;0?0:(z&gt;1?1:z))*255.5f) &lt;&lt; 8) | 0xFF,Xb
					}
				</DisplayString>
			</Synthetic>
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
			<Item Name="z">z,g</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;float,4&gt;" Priority="High">
		<DisplayString>[{x,g} {y,g} {z,g} {w,g}]</DisplayString>
		<Expand HideRawView="1">
			<CustomListItems MaxItemsPerView="1">
				<!-- calculate length using fast inverse sqrt -->
				<Variable Name="k" InitialValue="x*x+y*y+z*z+w*w"/>
				<Variable Name="n" InitialValue="k/2"/>
				<Variable Name="i" InitialValue="0x5F3759DF - ((*(int *)&amp;k) &gt;&gt; 1)"/>
				<If Condition="k != 0">
					<Exec>k = *(float *)&amp;i</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Item Name="[len]">1/k,g</Item>
				</If>
				<If Condition="k == 0">
					<Item Name="[len]">0.0f,g</Item>
				</If>
			</CustomListItems>
			<Synthetic Name="[rgba]">
				<DisplayString>
					<!-- hex RGBA color -->
					#{
					(unsigned((x&lt;0?0:(x&gt;1?1:x))*255.5f) &lt;&lt; 24) |
					(unsigned((y&lt;0?0:(y&gt;1?1:y))*255.5f) &lt;&lt; 16) |
					(unsigned((z&lt;0?0:(z&gt;1?1:z))*255.5f) &lt;&lt; 8) |
					(unsigned((w&lt;0?0:(w&gt;1?1:w))*255.5f) &lt;&lt; 0),Xb
					}
				</DisplayString>
			</Synthetic>
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
			<Item Name="z">z,g</Item>
			<Item Name="w">w,g</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;double,2&gt;" Priority="High">
		<DisplayString>[{x,g} {y,g}]</DisplayString>
		<Expand HideRawView="1">
			<CustomListItems MaxItemsPerView="1">
				<!-- calculate length using fast inverse sqrt -->
				<Variable Name="k" InitialValue="x*x+y*y"/>
				<Variable Name="n" InitialValue="k/2"/>
				<Variable Name="i" InitialValue="0x5FE6EB50C7B537A9 - ((*(long long *)&amp;k) &gt;&gt; 1)"/>
				<If Condition="k != 0">
					<Exec>k = *(double *)&amp;i</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Item Name="[len]">1/k,g</Item>
				</If>
				<If Condition="k == 0">
					<Item Name="[len]">0.0,g</Item>
				</If>
			</CustomListItems>
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;double,3&gt;" Priority="High">
		<DisplayString>[{x,g} {y,g} {z,g}]</DisplayString>
		<Expand HideRawView="1">
			<CustomListItems MaxItemsPerView="1">
				<!-- calculate length using fast inverse sqrt -->
				<Variable Name="k" InitialValue="x*x+y*y+z*z"/>
				<Variable Name="n" InitialValue="k/2"/>
				<Variable Name="i" InitialValue="0x5FE6EB50C7B537A9 - ((*(long long *)&amp;k) &gt;&gt; 1)"/>
				<If Condition="k != 0">
					<Exec>k = *(double *)&amp;i</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Item Name="[len]">1/k,g</Item>
				</If>
				<If Condition="k == 0">
					<Item Name="[len]">0.0,g</Item>
				</If>
			</CustomListItems>
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
			<Item Name="z">z,g</Item>
		</Expand>
	</Type>

	<Type Name="vector&lt;double,4&gt;" Priority="High">
		<DisplayString>[{x,g} {y,g} {z,g} {w,g}]</DisplayString>
		<Expand HideRawView="1">
			<CustomListItems MaxItemsPerView="1">
				<!-- calculate length using fast inverse sqrt -->
				<Variable Name="k" InitialValue="x*x+y*y+z*z+w*w"/>
				<Variable Name="n" InitialValue="k/2"/>
				<Variable Name="i" InitialValue="0x5FE6EB50C7B537A9 - ((*(long long *)&amp;k) &gt;&gt; 1)"/>
				<If Condition="k != 0">
					<Exec>k = *(double *)&amp;i</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Item Name="[len]">1/k,g</Item>
				</If>
				<If Condition="k == 0">
					<Item Name="[len]">0.0,g</Item>
				</If>
			</CustomListItems>
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
			<Item Name="z">z,g</Item>
			<Item Name="w">w,g</Item>
		</Expand>
	</Type>

	<Type Name="quaternion&lt;*&gt;">
		<DisplayString>{w,g} + {x,g}i + {y,g}j + {z,g}k</DisplayString>
		<Expand HideRawView="1">
			<CustomListItems MaxItemsPerView="1">
				<!-- calculate length using fast inverse sqrt -->
				<Variable Name="k" InitialValue="x*x+y*y+z*z+w*w"/>
				<Variable Name="n" InitialValue="k/2"/>
				<Variable Name="i" InitialValue="0x5FE6EB50C7B537A9 - ((*(long long *)&amp;k) &gt;&gt; 1)"/>
				<If Condition="k != 0">
					<Exec>k = *(double *)&amp;i</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Item Name="[len]">1/k,g</Item>
				</If>
				<If Condition="k == 0">
					<Item Name="[len]">0.0,g</Item>
				</If>
			</CustomListItems>
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
			<Item Name="z">z,g</Item>
			<Item Name="w">w,g</Item>
		</Expand>
	</Type>

	<Type Name="quaternion&lt;float&gt;" Priority="High">
		<DisplayString>{w,g} + {x,g}i + {y,g}j + {z,g}k</DisplayString>
		<Expand HideRawView="1">
			<CustomListItems MaxItemsPerView="1">
				<!-- calculate length using fast inverse sqrt -->
				<Variable Name="k" InitialValue="x*x+y*y+z*z+w*w"/>
				<Variable Name="n" InitialValue="k/2"/>
				<Variable Name="i" InitialValue="0x5F3759DF - ((*(int *)&amp;k) &gt;&gt; 1)"/>
				<If Condition="k != 0">
					<Exec>k = *(float *)&amp;i</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Exec>k = k * (1.5f - (n * k * k))</Exec>
					<Item Name="[len]">1/k,g</Item>
				</If>
				<If Condition="k == 0">
					<Item Name="[len]">0.0f,g</Item>
				</If>
			</CustomListItems>
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
			<Item Name="z">z,g</Item>
			<Item Name="w">w,g</Item>
		</Expand>
	</Type>

	<Type Name="quaternion&lt;double&gt;" Priority="High">
		<DisplayString>{w,g} + {x,g}i + {y,g}j + {z,g}k</DisplayString>
		<Expand HideRawView="1">
			<CustomListItems MaxItemsPerView="1">
				<!-- calculate length using fast inverse sqrt -->
				<Variable Name="k" InitialValue="x*x+y*y+z*z+w*w"/>
				<Variable Name="n" InitialValue="k/2"/>
				<Variable Name="i" InitialValue="0x5FE6EB50C7B537A9 - ((*(long long *)&amp;k) &gt;&gt; 1)"/>
				<If Condition="k != 0">
					<Exec>k = *(double *)&amp;i</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Exec>k = k * (1.5 - (n * k * k))</Exec>
					<Item Name="[len]">1/k,g</Item>
				</If>
				<If Condition="k == 0">
					<Item Name="[len]">0.0,g</Item>
				</If>
			</CustomListItems>
			<Item Name="x">x,g</Item>
			<Item Name="y">y,g</Item>
			<Item Name="z">z,g</Item>
			<Item Name="w">w,g</Item>
		</Expand>
	</Type>

	<Type Name="matrix&lt;*,2,2&gt;">
		<DisplayString>[{col[0]} {col[1]}]</DisplayString>
		<Expand HideRawView="1">
			<!-- display matrix in row major order - it makes more sense -->
			<Synthetic Name="row 0">
				<DisplayString>[{col[0].x,g} {col[1].x,g}]</DisplayString>
			</Synthetic>
			<Synthetic Name="row 1">
				<DisplayString>[{col[0].y,g} {col[1].y,g}]</DisplayString>
			</Synthetic>
			<Synthetic Name="columns">
				<Expand>
					<Item Name="[0]">col[0]</Item>
					<Item Name="[1]">col[1]</Item>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="matrix&lt;*,3,3&gt;">
		<DisplayString>[{col[0]} {col[1]} {col[2]}]</DisplayString>
		<Expand HideRawView="1">
			<!-- display matrix in row major order - it makes more sense -->
			<Synthetic Name="row 0">
				<DisplayString>[{col[0].x,g} {col[1].x,g} {col[2].x,g}]</DisplayString>
			</Synthetic>
			<Synthetic Name="row 1">
				<DisplayString>[{col[0].y,g} {col[1].y,g} {col[2].y,g}]</DisplayString>
			</Synthetic>
			<Synthetic Name="row 2">
				<DisplayString>[{col[0].z,g} {col[1].z,g} {col[2].z,g}]</DisplayString>
			</Synthetic>
			<Synthetic Name="columns">
				<Expand>
					<Item Name="[0]">col[0]</Item>
					<Item Name="[1]">col[1]</Item>
					<Item Name="[2]">col[2]</Item>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

	<Type Name="matrix&lt;*,4,4&gt;">
		<DisplayString>[{col[0]} {col[1]} {col[2]} {col[3]}]</DisplayString>
		<Expand HideRawView="1">
			<!-- display matrix in row major order - it makes more sense -->
			<Synthetic Name="row 0">
				<DisplayString>[{col[0].x,g} {col[1].x,g} {col[2].x,g} {col[3].x,g}]</DisplayString>
			</Synthetic>
			<Synthetic Name="row 1">
				<DisplayString>[{col[0].y,g} {col[1].y,g} {col[2].y,g} {col[3].y,g}]</DisplayString>
			</Synthetic>
			<Synthetic Name="row 2">
				<DisplayString>[{col[0].z,g} {col[1].z,g} {col[2].z,g} {col[3].z,g}]</DisplayString>
			</Synthetic>
			<Synthetic Name="row 3">
				<DisplayString>[{col[0].w,g} {col[1].w,g} {col[2].w,g} {col[3].w,g}]</DisplayString>
			</Synthetic>
			<Synthetic Name="columns">
				<Expand>
					<Item Name="[0]">col[0]</Item>
					<Item Name="[1]">col[1]</Item>
					<Item Name="[2]">col[2]</Item>
					<Item Name="[3]">col[3]</Item>
				</Expand>
			</Synthetic>
		</Expand>
	</Type>

</AutoVisualizer>